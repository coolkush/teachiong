import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 29,
        space: 29,
        color: appTheme.amber90001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.4),
          fontSize: 19.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 38.fSize,
          fontFamily: 'Rubik',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 9.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.indigoA700,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF2AB7C7),
    primaryContainer: Color(0XFFFF0000),
    secondaryContainer: Color(0XFFBDBDBD),

    // Error colors
    errorContainer: Color(0X195E5E5E),
    onError: Color(0XFF979797),
    onErrorContainer: Color(0XFF070B2E),

    // On colors(text colors)
    onPrimary: Color(0X990D1829),
    onPrimaryContainer: Color(0X51FFFFFF),
    onSecondaryContainer: Color(0XB51C1C1C),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFF7E289);
  Color get amber900 => Color(0XFFF86F03);
  Color get amber90001 => Color(0XFFF77307);

  // Black
  Color get black900 => Color(0XFF070417);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFB6D2F4);
  Color get blue50 => Color(0XFFD8E8FA);
  Color get blue5001 => Color(0XFFECEFFF);
  Color get blue5002 => Color(0XFFDEEEFE);
  Color get blue5003 => Color(0XFFE4EFFA);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray900 => Color(0XFF373737);

  // Cyan
  Color get cyan100 => Color(0XFFA5F5FF);
  Color get cyan400 => Color(0XFF39CCDD);

  // Gray
  Color get gray100 => Color(0XFFEDFFFA);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray30001 => Color(0XFFE2E2E2);
  Color get gray400 => Color(0XFFB4B4B4);
  Color get gray50 => Color(0XFFFAFAFF);
  Color get gray500 => Color(0XFF9B9B9B);
  Color get gray50001 => Color(0XFFAAAAAA);
  Color get gray50002 => Color(0XFF909090);
  Color get gray5001 => Color(0XFFFFFAF3);
  Color get gray600 => Color(0XFF757575);
  Color get gray700 => Color(0XFF636363);
  Color get gray70019 => Color(0X195C5C5C);
  Color get gray800 => Color(0XFF3C3C3C);
  Color get gray80001 => Color(0XFF3F3F3F);

  // GrayC
  Color get gray900C1 => Color(0XC1121212);

  // Green
  Color get greenA400 => Color(0XFF07E092);
  Color get greenA700 => Color(0XFF00DE59);

  // Indigo
  Color get indigo20019 => Color(0X1991BCE3);
  Color get indigo300 => Color(0XFF6C92C1);
  Color get indigo500 => Color(0XFF3D4ABA);
  Color get indigoA700 => Color(0XFF2051E5);

  // LightBlue
  Color get lightBlue50 => Color(0XFFE8FCFF);
  Color get lightBlue70005 => Color(0X050070E0);

  // Red
  Color get red50 => Color(0XFFFFEBF3);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
